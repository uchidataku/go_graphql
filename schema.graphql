"Node interface for Realy specification"
interface Node {
    id: ID!
}
"Record provides createdAt, updatedAt"
interface Record {
    createdAt: DateTime!
    updatedAt: DateTime!
}
type Mutation {
    # Token
    verifyToken(input: VerifyTokenInput!): VerifyTokenPayload

    # Account
    tempRegister(input: TempRegisterInput!): TempRegisterPayload
    signUpAccount(input: SignUpAccountInput!): SignUpAccountPayload
    signInAccount(input: SignInAccountInput!): SignInAccountPayload
    updateAccount(input: UpdateAccountInput!): UpdateAccountPayload
    deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload

    # Plan
    applyPlan(input: ApplyPlanInput!): ApplyPlanPayload

    # Company
    createCompany(input: CreateCompanyInput!): CreateCompanyPayload
    updateCompany(input: UpdateCompanyInput!): UpdateCompanyPayload
    deleteCompany(input: DeleteCompanyInput!): DeleteCompanyPayload

    # License
    createLicense(input: CreateLicenseInput!): CreateLicensePayload
    revokeLicense(input: RevokeLicenseInput!): RevokeLicensePayload

    # Membership
    inviteMembership(input: InviteMembershipInput!): InviteMembershipPayload
    updateMembership(input: UpdateMembershipInput!): UpdateMembershipPayload
    deleteMembership(input: DeleteMembershipInput!): DeleteMembershipPayload

    # QRPreset
    createQRPreset(input: CreateQRPresetInput!): CreateQRPresetPayload
    updateQRPreset(input: UpdateQRPresetInput!): UpdateQRPresetPayload
    deleteQRPreset(input: DeleteQRPresetInput!): DeleteQRPresetPayload
}


#SignUpAccount
input SignUpAccountInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

type SignUpAccountPayload {
    account: Account
}

#SignInAccount
input SignInAccountInput {
    email: String!
    password: String!
}

type SignInAccountPayload {
    account: Account
}

# UpdateAccount
input UpdateAccountInput {
    accountId: ID!
    firstName: String
    lastName: String
    newEmail: String
    password: String
    newPassword: String
}
type UpdateAccountPayload {
    account: Account
}

# DeleteAccount
input DeleteAccountInput {
    accountId: ID!
}
type DeleteAccountPayload {
    account: Account
}

# CreateCompany
input CreateCompanyInput {
    name: String!
    phone: Int!
    domainName: String
}
type CreateCompanyPayload {
    company: Company
}

# UpdateCompany
input UpdateCompanyInput {
    companyId: ID!
    name: String
    phone: Int
    domainName: String
}
type UpdateCompanyPayload {
    company: Company
}

# DeleteCompany
input DeleteCompanyInput {
    companyId: ID!
}
type DeleteCompanyPayload {
    company: Company
}

# CreateLicense
input CreateLicenseInput {
    companyId: ID!
}
type CreateLicensePayload {
    license: License
}

# RevokeLicense
input RevokeLicenseInput {
    licenseId: ID!
}
type RevokeLicensePayload {
    license: License
}

# inviteMembership
input InviteMembershipInput {
    emails: [String!]
}
type InviteMembershipPayload {
    memberships: MembershipConnection
}

# UpdateMembership
input UpdateMembershipInput {
    membershipId: ID!
    role: MembershipRole
}
type UpdateMembershipPayload {
    membership: Membership
}

# DeleteMembership
input DeleteMembershipInput {
    membershipId: ID!
}
type DeleteMembershipPayload {
    membership: Membership
}

# ApplyPlan
"運営に申込通知メールを飛ばす"
input ApplyPlanInput {
    companyId: ID! # 初期段階はプラン選択なしだが、将来的にはプランを選択させる
}
type ApplyPlanPayload {
    company: Company
}
# createQRCode
input CreateQRCodeInput {
    qrPresetId: ID!
    value: String!
    secretData: String
    "背景画像"
    bgFile: String
    "マスク画像"
    maskFile: String
    "エッジ画像"
    edgeFile: String
    "シンボル位置"
    symbolType: SymbolType
    "ポジセル色"
    posiRgb: String
    "セルの形"
    cellType: CellType
    "QRコードVersion"
    qrVersion: Int
    "カラーモード"
    colorMode: ColorMode
    "出力ファイルフォーマット"
    imageFormat: ImageFormat
    "解像度（背景画像と同じ解像度）"
    outputSpeed: Int
    "解像度（dpi指定）"
    dpi: Int
    "解像度（mm指定）"
    mmSize: Int
    "レポート出力"
    report: Boolean
    "複製検知モード"
    showCopyProtectMode: Boolean
    "マスクモード"
    maskMode: MaskMode
    "余白セル数"
    qrMargin: Int
    "ガンマ値"
    ganma: Float
    "光源値"
    dValue: DValue
    "基準L値から明側許容値"
    permrangeLight: Int
    "基準L値から暗側許容値"
    permrangeDark: Int
    "ロゴ内ポジL値下限"
    posiThreshold: Int
    "背景画像反転L値下限"
    basePosiThreshold: Int
    "複写検知時グレイ部ポジL値下限"
    grayThreshold: Int
    "ベース部セルの直径の割合"
    baseRadius: Float
    "ロゴ部セルの直径の割合"
    logoRadius: Float
    "ポジ部セルの直径の割合"
    posiRadius: Float
    "複写検知時グレイ部セルの直径の割合"
    grayRadius: Float
    "jpgの画質"
    imageQuality: Int
    "秘匿コードの処理モード"
    secretMode: SecretMode
    "複写検知時グレイ部色"
    grayColor: String
    "複写検知時グラデーション開始色"
    gradient1Color: String
    "複写検知時グラデーション中間色"
    gradient2Color: String
    "複写検知時グラデーション終了色"
    gradient3Color: String
    "複写検知時グラデーション中間色位置"
    gradientMiddlePoz: Float
    "CMYK変換時のプロファイルの有無"
    isCmykProfile: Boolean
    "CMYK変換時のプロファイルデータ"
    cmykProfileData: String
}
type CreateQRCodePayload {
    qrCode: QRCode
}


# createQRPreset
input CreateQRPresetInput {
    companyId: ID!
    type: PresetType!
    "背景画像"
    bgFile: String
    "マスク画像"
    maskFile: String
    "エッジ画像"
    edgeFile: String
    "シンボル位置"
    symbolType: SymbolType!
    "ポジセル色"
    posiRgb: String
    "セルの形"
    cellType: CellType!
    "QRコードVersion"
    qrVersion: Int
    "カラーモード"
    colorMode: ColorMode!
    "出力ファイルフォーマット"
    imageFormat: ImageFormat!
    "解像度（背景画像と同じ解像度）"
    outputSpeed: Int
    "解像度（dpi指定）"
    dpi: Int
    "解像度（mm指定）"
    mmSize: Int
    "レポート出力"
    report: Boolean!
    "複製検知モード"
    showCopyProtectMode: Boolean!
    "マスクモード"
    maskMode: MaskMode!
    "余白セル数"
    qrMargin: Int
    "ガンマ値"
    ganma: Float
    "光源値"
    dValue: DValue!
    "基準L値から明側許容値"
    permrangeLight: Int
    "基準L値から暗側許容値"
    permrangeDark: Int
    "ロゴ内ポジL値下限"
    posiThreshold: Int
    "背景画像反転L値下限"
    basePosiThreshold: Int
    "複写検知時グレイ部ポジL値下限"
    grayThreshold: Int
    "ベース部セルの直径の割合"
    baseRadius: Float
    "ロゴ部セルの直径の割合"
    logoRadius: Float
    "ポジ部セルの直径の割合"
    posiRadius: Float
    "複写検知時グレイ部セルの直径の割合"
    grayRadius: Float
    "jpgの画質"
    imageQuality: Int
    "秘匿コードの処理モード"
    secretMode: SecretMode!
    "複写検知時グレイ部色"
    grayColor: String
    "複写検知時グラデーション開始色"
    gradient1Color: String
    "複写検知時グラデーション中間色"
    gradient2Color: String
    "複写検知時グラデーション終了色"
    gradient3Color: String
    "複写検知時グラデーション中間色位置"
    gradientMiddlePoz: Float
    "CMYK変換時のプロファイルの有無"
    isCmykProfile: Boolean!
    "CMYK変換時のプロファイルデータ"
    cmykProfileData: String
}
type CreateQRPresetPayload {
    qrPreset: QRPreset
}

# UpdateQRPreset
input UpdateQRPresetInput {
    qrPresetId: ID!
    isActive: Boolean
    bgFile: String
    "背景画像"
    bgFile: String
    "マスク画像"
    maskFile: String
    "エッジ画像"
    edgeFile: String
    "シンボル位置"
    symbolType: SymbolType
    "ポジセル色"
    posiRgb: String
    "セルの形"
    cellType: CellType
    "QRコードVersion"
    qrVersion: Int
    "カラーモード"
    colorMode: ColorMode
    "出力ファイルフォーマット"
    imageFormat: ImageFormat
    "解像度（背景画像と同じ解像度）"
    outputSpeed: Int
    "解像度（dpi指定）"
    dpi: Int
    "解像度（mm指定）"
    mmSize: Int
    "レポート出力"
    report: Boolean
    "複製検知モード"
    showCopyProtectMode: Boolean
    "マスクモード"
    maskMode: MaskMode
    "余白セル数"
    qrMargin: Int
    "ガンマ値"
    ganma: Float
    "光源値"
    dValue: DValue
    "基準L値から明側許容値"
    permrangeLight: Int
    "基準L値から暗側許容値"
    permrangeDark: Int
    "ロゴ内ポジL値下限"
    posiThreshold: Int
    "背景画像反転L値下限"
    basePosiThreshold: Int
    "複写検知時グレイ部ポジL値下限"
    grayThreshold: Int
    "ベース部セルの直径の割合"
    baseRadius: Float
    "ロゴ部セルの直径の割合"
    logoRadius: Float
    "ポジ部セルの直径の割合"
    posiRadius: Float
    "複写検知時グレイ部セルの直径の割合"
    grayRadius: Float
    "jpgの画質"
    imageQuality: Int
    "秘匿コードの処理モード"
    secretMode: SecretMode
    "複写検知時グレイ部色"
    grayColor: String
    "複写検知時グラデーション開始色"
    gradient1Color: String
    "複写検知時グラデーション中間色"
    gradient2Color: String
    "複写検知時グラデーション終了色"
    gradient3Color: String
    "複写検知時グラデーション中間色位置"
    gradientMiddlePoz: Float
    "CMYK変換時のプロファイルの有無"
    isCmykProfile: Boolean
    "CMYK変換時のプロファイルデータ"
    cmykProfileData: String
}
type UpdateQRPresetPayload {
    qrPreset: QRPreset
}

# DeleteQRPreset
input DeleteQRPresetInput {
    qrPresetId: ID!
}
type DeleteQRPresetPayload {
    qrPreset: QRPreset
}

# AcceptQRPreset
input AcceptQRPresetInput {
    qrPresetId: ID!
}
type AcceptQRPresetPayload {
    qrPreset: QRPreset
}

#TempRegister
input TempRegisterInput {
    email: String!
}

type TempRegisterPayload {
    token: Token # 本登録用メールを送信する
}

# VerifyToken
input VerifyTokenInput {
    token: ID!
}

type VerifyTokenPayload {
    email: String # フロントで保持してSignUpAccountのmutationでもらう
}
"Account Object"
type Account implements Node & Record {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    role: AccountRole!

    notifications(
        first: Int
        after: String
        last: Int
        before: String
    ): NotificationConnection!

    createdAt: DateTime!
    updatedAt: DateTime!
}

enum AccountRole {
    ADMIN
    CUSTOMER
}

type AccountEdge {
    cursor: String!
    node: Account
}

type AccountConnection {
    pageInfo: PageInfo!
    edges: [AccountEdge]
}
"Company Object"
type Company implements Node & Record {
    id: ID!
    name: String!
    phone: Int!
    "オーナーのアドレスのドメインから抜粋、そのドメインを使用しているアカウントはMembershipが自動生成される"
    domainName: String

    licenses(
        first: Int
        after: String
        last: Int
        before: String
    ): LicenseConnection!
    memberships(
        first: Int
        after: String
        last: Int
        before: String
    ): MembershipConnection!

    createdAt: DateTime!
    updatedAt: DateTime!
}

enum PlanStatus {
    VALID # ライセンスキー発行済み・有効期限内
    INVALID # ライセンスキー発行済み・有効期限外
    APPLYING # ライセンスキー発行待ち
}

type CompanyEdge {
    cursor: String!
    node: Company
}

type CompanyConnection {
    pageInfo: PageInfo!
    edges: [CompanyEdge]
}
"License Object"
type License implements Node & Record {
    id: ID!
    key: String!
    sinceDate: Date!
    untilDate: Date!
    isRevoked: Boolean! # 強制取り消しフラグ

    company: Company!

    createdAt: DateTime!
    updatedAt: DateTime!
}

type LicenseEdge {
    cursor: String!
    node: License
}

type LicenseConnection {
    pageInfo: PageInfo!
    edges: [LicenseEdge]
}
"Membership Object"
type Membership implements Node & Record {
    id: ID!
    role: MembershipRole!

    account: Account!
    company: Company!

    createdAt: DateTime!
    updatedAt: DateTime!
}

enum MembershipRole {
    ADMIN
    GENERAL
}

type MembershipEdge {
    cursor: String!
    node: Membership
}

type MembershipConnection {
    pageInfo: PageInfo!
    edges: [MembershipEdge]
}
"Notification Object"
type Notification implements Node & Record {
    id: ID!
    content: String!

    account: Account

    createdAt: DateTime!
    updatedAt: DateTime!
}

type NotificationEdge {
    cursor: String!
    node: Notification
}

type NotificationConnection {
    pageInfo: PageInfo!
    edges: [NotificationEdge]
}
"QRCode Object"
type QRCode implements Node & Record {
    id: ID!
    value: String!
    secretData: String
    "背景画像"
    bgFile: String
    "マスク画像"
    maskFile: String
    "エッジ画像"
    edgeFile: String
    "シンボル位置"
    symbolType: SymbolType
    "ポジセル色"
    posiRgb: String
    "セルの形"
    cellType: CellType
    "QRコードVersion"
    qrVersion: Int
    "カラーモード"
    colorMode: ColorMode
    "出力ファイルフォーマット"
    imageFormat: ImageFormat
    "解像度（背景画像と同じ解像度）"
    outputSpeed: Int
    "解像度（dpi指定）"
    dpi: Int
    "解像度（mm指定）"
    mmSize: Int
    "レポート出力"
    report: Boolean
    "複製検知モード"
    showCopyProtectMode: Boolean
    "マスクモード"
    maskMode: MaskMode
    "余白セル数"
    qrMargin: Int
    "ガンマ値"
    ganma: Float
    "光源値"
    dValue: DValue
    "基準L値から明側許容値"
    permrangeLight: Int
    "基準L値から暗側許容値"
    permrangeDark: Int
    "ロゴ内ポジL値下限"
    posiThreshold: Int
    "背景画像反転L値下限"
    basePosiThreshold: Int
    "複写検知時グレイ部ポジL値下限"
    grayThreshold: Int
    "ベース部セルの直径の割合"
    baseRadius: Float
    "ロゴ部セルの直径の割合"
    logoRadius: Float
    "ポジ部セルの直径の割合"
    posiRadius: Float
    "複写検知時グレイ部セルの直径の割合"
    grayRadius: Float
    "jpgの画質"
    imageQuality: Int
    "秘匿コードの処理モード"
    secretMode: SecretMode
    "複写検知時グレイ部色"
    grayColor: String
    "複写検知時グラデーション開始色"
    gradient1Color: String
    "複写検知時グラデーション中間色"
    gradient2Color: String
    "複写検知時グラデーション終了色"
    gradient3Color: String
    "複写検知時グラデーション中間色位置"
    gradientMiddlePoz: Float
    "CMYK変換時のプロファイルの有無"
    isCmykProfile: Boolean
    "CMYK変換時のプロファイルデータ"
    cmykProfileData: String

    qrPreset: QRPreset!

    createdAt: DateTime!
    updatedAt: DateTime!
}

type QRCodeEdge {
    cursor: String!
    node: QRCode
}

type QRCodeConnection {
    pageInfo: PageInfo!
    edges: [QRCodeEdge]
}
"QRPreset Object"
type QRPreset implements Node & Record {
    id: ID!
    type: PresetType!
    "有効か"
    isActive: Boolean
    "背景画像"
    bgFile: String
    "マスク画像"
    maskFile: String
    "エッジ画像"
    edgeFile: String
    "シンボル位置"
    symbolType: SymbolType!
    "ポジセル色"
    posiRgb: String
    "セルの形"
    cellType: CellType!
    "QRコードVersion"
    qrVersion: Int
    "カラーモード"
    colorMode: ColorMode!
    "出力ファイルフォーマット"
    imageFormat: ImageFormat!
    "解像度（背景画像と同じ解像度）"
    outputSpeed: Int
    "解像度（dpi指定）"
    dpi: Int
    "解像度（mm指定）"
    mmSize: Int
    "レポート出力"
    report: Boolean!
    "複製検知モード"
    showCopyProtectMode: Boolean!
    "マスクモード"
    maskMode: MaskMode!
    "余白セル数"
    qrMargin: Int
    "ガンマ値"
    ganma: Float
    "光源値"
    dValue: DValue!
    "基準L値から明側許容値"
    permrangeLight: Int
    "基準L値から暗側許容値"
    permrangeDark: Int
    "ロゴ内ポジL値下限"
    posiThreshold: Int
    "背景画像反転L値下限"
    basePosiThreshold: Int
    "複写検知時グレイ部ポジL値下限"
    grayThreshold: Int
    "ベース部セルの直径の割合"
    baseRadius: Float
    "ロゴ部セルの直径の割合"
    logoRadius: Float
    "ポジ部セルの直径の割合"
    posiRadius: Float
    "複写検知時グレイ部セルの直径の割合"
    grayRadius: Float
    "jpgの画質"
    imageQuality: Int
    "秘匿コードの処理モード"
    secretMode: SecretMode!
    "複写検知時グレイ部色"
    grayColor: String
    "複写検知時グラデーション開始色"
    gradient1Color: String
    "複写検知時グラデーション中間色"
    gradient2Color: String
    "複写検知時グラデーション終了色"
    gradient3Color: String
    "複写検知時グラデーション中間色位置"
    gradientMiddlePoz: Float
    "CMYK変換時のプロファイルの有無"
    isCmykProfile: Boolean!
    "CMYK変換時のプロファイルデータ"
    cmykProfileData: String

    "この2つが何に使うか分からんがDBにあった"
    KeyFile: String
    paramFile: String

    company: Company

    createdAt: DateTime!
    updatedAt: DateTime!
}

enum PresetType {
    DEFAULT
    ORGANIZATIONAL
}

enum SymbolType {
    "右上なし"
    TOP_RIGHT
    "左上なし"
    TOP_LEFT
    "右下なし"
    BOTTOM_RIGHT
    "左下なし"
    BOTTOM_LEFT
}

enum CellType {
    SQUARE
    CIRCLE
    DIAMOND
    STAR
}

enum ColorMode {
    RGB
    GRAY
    CMYK
}

enum ImageFormat {
    PNG
    JPG
    SVG
    TIFF
    PDF
    GIF
    BMP
}

enum MaskMode {
    MASK_MODE
    TRANCE
    ON
}

enum DValue {
    D65
    D50
}

enum SecretMode {
    "平文"
    PLAINTEXT
    "暗号化・復号"
    DECRYPTION
    "暗号化・照合"
    COMPARISON
}

type QRPresetEdge {
    cursor: String!
    node: QRPreset
}

type QRPresetConnection {
    pageInfo: PageInfo!
    edges: [QRPresetEdge]
}
"Token Object"
type Token implements Node & Record {
    id: ID!
    email: String!

    createdAt: DateTime!
    updatedAt: DateTime!
}

type TokenEdge {
    cursor: String!
    node: Token
}

type TokenConnection {
    pageInfo: PageInfo!
    edges: [TokenEdge]
}
type Query {
    """
    Fetches an object given its ID.
    """
    node(id: ID!): Node

    "Account"
    currentAccount: Account!
    accounts(
        first: Int
        after: String
        last: Int
        before: String
        role: AccountRole
    ): AccountConnection!

    "Company"
    companies(
        first: Int
        after: String
        last: Int
        before: String
        planStatus: PlanStatus
    ): CompanyConnection!

    "QRCode"
    qrCodes(
        first: Int
        after: String
        last: Int
        before: String
    ): QRCodeConnection!

    "QRPreset"
    qrPresets(
        first: Int
        after: String
        last: Int
        before: String
        type: PresetType
        isActive: Boolean
    ): QRPresetConnection!
}


type PageInfo {
    hasPreviousPage: Boolean!
    startCursor: String
    hasNextPage: Boolean!
    endCursor: String
}

scalar Date
scalar DateTime
